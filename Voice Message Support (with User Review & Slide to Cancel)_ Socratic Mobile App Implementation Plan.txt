# Voice Message Support (with User Review & Slide to Cancel): Socratic Mobile App Implementation Plan

**Objective:** Implement a voice message feature where users can record audio, have it transcribed to text by a server-side OpenAI API, review and edit the transcript in the input field, and then send it as a regular text message. Audio recording will be limited to a maximum of 2 minutes. Users will also be able to slide their finger to the left while recording to cancel it.

## Phase 1: UI/UX Enhancements (Client-Side - Socratic-Mobile)

**Goal:** Modify the chat input area to support a microphone button, visual feedback for recording, a "slide to cancel" gesture, and display the transcribed text for review.

**File to Modify:** `Socratic-Mobile/src/components/ChatInput.tsx`
**Key Imports:** `PanResponder`, `Animated` from `react-native`.

1.  **Conditional Button Rendering & Cancel Area:**
   * **Task:** Modify the UI to show a microphone button, a send button, and a "cancel recording" area.
   * **Details:**
       * The main input area will now render according to whether the user is recording or not/ has content in it or not.
       * When `isRecording` is `true`:
           * A "Cancel Zone" (e.g., an `Animated.View` containing a trash can icon and text like "< Slide to Cancel") will animate into view from the left side of the screen or become visible.
           * The `TextInput` might be hidden or overlaid by a recording indicator.
           * The microphone button itself will be the primary touch target for starting and managing the recording gesture.
       * If `messageText` is empty AND `isProcessingAudio` is `false` AND `isRecording` is `false`, render a **Microphone Icon Button**. This button will have `PanResponder` handlers attached.
       * If `messageText` has content OR `isProcessingAudio` is `true`, render the **Send Icon Button**.
       * Use an icon library like `@expo/vector-icons` (e.g., `MaterialCommunityIcons` for `microphone`, `send`, `trash-can`).

2.  **State Management (Additions/Updates):**
   * **Task:** Add/confirm state variables for gesture handling and UI.
   * **Details:**
       * `messageText: string`
       * `isRecording: boolean`
       * `recordingDuration: number`
       * `isProcessingAudio: boolean`
       * `audioPermissionGranted: boolean | null`
       * `recording: Audio.Recording | null`
       * `showCancelZone: boolean` (or use an `Animated.Value` for opacity/translation of the cancel zone).
       * `pan: Animated.ValueXY` (for tracking the microphone button's position if you want it to move with the finger, or just for gesture data).
       * `isGestureOverCancelZone: boolean` (to give visual feedback if the finger is over the cancel threshold).

3.  **Microphone Button Interaction & Styling (with `PanResponder`):**
   * **Task:** Implement press-and-hold interaction using `PanResponder` for starting, and gesture tracking for sliding to cancel.
   * **Styling:**
       * Microphone button: Visually distinct. On press, it will animate and scale up.
       * Cancel Zone: Appears during recording, clearly indicates its function (e.g., red background or icon when finger hovers over it).
   * **`PanResponder` Setup (in `useEffect` or constructor for class components):**
       ```typescript
       // In your component
       const panResponder = useRef(
         PanResponder.create({
           onStartShouldSetPanResponder: () => true, // Allow touch to activate
           onPanResponderGrant: (evt, gestureState) => {
             // User has pressed down on the mic button
             if (messageText === '') { // Only start if input is empty
               handleStartRecording(); // Your existing function to request permissions, start Audio.Recording
             }
           },
           onPanResponderMove: (evt, gestureState) => {
             if (!isRecording) return; // Only track moves if recording has started

             // gestureState.dx is the accumulated distance of the gesture since the touch started
             // Check if gestureState.dx (horizontal drag) has moved significantly to the left
             const cancelThreshold = -100; // e.g., 100 pixels to the left
             if (gestureState.dx < cancelThreshold) {
               setIsGestureOverCancelZone(true); // Update state for visual feedback on cancel zone
               // Optionally, provide haptic feedback when crossing threshold
               // Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
             } else {
               setIsGestureOverCancelZone(false);
             }
             // You might animate the mic button itself to follow the finger slightly:
             // pan.setValue({ x: gestureState.dx, y: 0 }); // Limit to x-axis or handle y if needed
           },
           onPanResponderRelease: (evt, gestureState) => {
             // User has lifted their finger
             // pan.setValue({ x: 0, y: 0 }); // Reset button position if animated

             if (!isRecording) return; // Should not happen if onPanResponderGrant checks isRecording

             const cancelThreshold = -100;
             if (gestureState.dx < cancelThreshold) {
               handleCancelRecording();
             } else {
               handleStopRecordingAndProcess(); // Process as normal
             }
             setIsGestureOverCancelZone(false);
           },
           onPanResponderTerminate: (evt, gestureState) => {
             // Another component has become the responder, or OS event (e.g. call)
             // Treat this as a cancel or an abrupt stop.
             if (isRecording) {
               handleCancelRecording(); // Or a more graceful stop if possible
             }
             setIsGestureOverCancelZone(false);
           },
         })
       ).current;
       ```
   * Attach `panResponder.panHandlers` to the `TouchableOpacity` or `View` acting as your microphone button.
       `<TouchableOpacity {...panResponder.panHandlers}> <Icon name="microphone" /> </TouchableOpacity>`
   * **`handleStartRecording` (called from `onPanResponderGrant`):**
       * (Existing logic: Request permissions, trigger haptics, set `isRecording(true)`, reset `recordingDuration`, start `Audio.Recording` & timer).
       * Animate in the "Cancel Zone" UI: `setShowCancelZone(true)` or trigger animation.
   * **Accessibility:** Labels for mic button and cancel zone if it becomes interactive.

4.  **Microphone Permission Handling (using `expo-av`):**
   * **Task:** (No change from previous plan) Implement robust microphone permission requests.
   * **Details:** (Same as previous plan - `getAudioPermission` function, `useEffect` for `setAudioModeAsync`).

5.  **Recording UI Feedback (Updates):**
   * **Task:** Provide clear visual feedback for recording state and cancel interaction.
   * **Details:**
       * While `isRecording` is `true`:
           * "Cancel Zone" is visible to the left.
           * If `isGestureOverCancelZone` is `true`, the Cancel Zone should highlight (e.g., icon turns brighter red, background changes).
           * Microphone button might show a "recording active" state.
           * Display `recordingDuration` timer (e.g., "0:05 / 2:00").
       * If `isProcessingAudio` is `true`:
           * Hide Cancel Zone.
           * Show a loading indicator where the “send” button is.

## Phase 2: Audio Recording with Duration Limit & Cancellation (Client-Side - Socratic-Mobile)

**Goal:** Implement audio recording, enforce duration limit, and handle slide-to-cancel gesture.

**File to Modify:** `Socratic-Mobile/src/components/ChatInput.tsx`

1.  **Install `expo-av`, `expo-haptics` (if not already):** (Same as previous plan)

2.  **Timer State and Logic:** (Same as previous plan - `durationIntervalId`, `MAX_RECORDING_DURATION_SECONDS`)

3.  **Start Recording and Timer (`handleStartRecording`):**
   * **Task:** (Minor changes from previous plan, mostly UI activation)
   * **Details:**
       * Called from `panResponder.onPanResponderGrant`.
       * Logic for starting `Audio.Recording` and `setInterval` for `recordingDuration` remains largely the same.
       * Add: `setShowCancelZone(true);` (or trigger animation for cancel zone).

4.  **Stop Recording and Process (`handleStopRecordingAndProcess`):**
   * **Task:** (Called when `PanResponder` releases NOT over cancel zone) Stop recording and proceed to STT.
   * **Details:** (Largely same as previous plan)
       ```typescript
       async function handleStopRecordingAndProcess(wasAutoStopped: boolean = false) {
         if (!recording) return; // Should already be checked by isRecording state

         if (durationIntervalId) {
           clearInterval(durationIntervalId);
           setDurationIntervalId(null);
         }
         // setIsRecording(false); // This will be set by PanResponder release or here if auto-stopped
         setShowCancelZone(false); // Hide cancel zone

         if (wasAutoStopped) {
           Alert.alert('Recording Limit Reached', `Recording stopped automatically after ${MAX_RECORDING_DURATION_SECONDS} seconds.`);
           Haptics.notificationAsync(Haptics.NotificationFeedbackType.Warning);
         } else {
           // Haptics for successful stop (not cancel)
           // Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
         }
         setIsRecording(false); // Ensure this is set

         try {
           await recording.stopAndUnloadAsync();
           const uri = recording.getURI();
           setRecording(null);

           if (uri) {
             console.log('Recording stopped and stored at', uri);
             setIsProcessingAudio(true);
             await processAudioForSTT(uri); // Defined in Phase 3
           } else {
             Alert.alert('Error', 'Could not get recording data.');
             setIsProcessingAudio(false);
           }
         } catch (err) {
           console.error('Failed to stop recording', err);
           Alert.alert('Error', 'Could not stop recording.');
           setIsProcessingAudio(false);
           setRecording(null);
         }
       }
       ```

5.  **Handle Cancel Recording (`handleCancelRecording`):**
   * **Task:** Create a new function to stop and discard the recording.
   * **Details:**
       ```typescript
       async function handleCancelRecording() {
         console.log('Recording cancelled by user.');
         Haptics.notificationAsync(Haptics.NotificationFeedbackType.Error); // Or a different haptic

         if (durationIntervalId) {
           clearInterval(durationIntervalId);
           setDurationIntervalId(null);
         }
         setIsRecording(false);
         setShowCancelZone(false);
         setIsGestureOverCancelZone(false); // Reset this visual state too

         if (recording) {
           try {
             await recording.stopAndUnloadAsync(); // Stop and unload to free resources
             const uri = recording.getURI();
             if (uri) {
               // Clean up the audio file immediately as it's cancelled
               FileSystem.deleteAsync(uri, { idempotent: true })
                 .catch(e => console.warn("Could not delete cancelled audio file", e));
             }
           } catch (error) {
             console.error('Error stopping/unloading cancelled recording:', error);
           } finally {
             setRecording(null);
           }
         }
         // Reset any other relevant UI states, e.g., microphone button appearance
       }
       ```
   * This function is called from `panResponder.onPanResponderRelease` if the gesture ends over the cancel zone, or from `onPanResponderTerminate`.

## Phase 3: Speech-to-Text (STT) Processing (Client & Server)

**Goal:** (No change from previous plan) Send valid audio to backend for OpenAI transcription.

### 3.1 Client-Side (`Socratic-Mobile/src/components/ChatInput.tsx`)
   * **`processAudioForSTT(audioUri: string)` function:** (Same as previous plan)
   * **Update API Client:** (Same as previous plan)

### 3.2 Backend-Side (`Socratic-Web/backend`)
   * **Setup OpenAI:** (Same as previous plan)
   * **Create/Update Transcription Endpoint:** (Same as previous plan)

## Phase 4: User Review and Sending Message (Client-Side - Socratic-Mobile)

**Goal:** (No change from previous plan) Allow user to review/edit transcript and send.

**File to Modify:** `Socratic-Mobile/src/components/ChatInput.tsx`
   * **Populating Input Field:** (Same as previous plan)
   * **Enabling Send Button:** (Same as previous plan)
   * **Sending the Message:** (Same as previous plan)

## Phase 5: Backend for Standard Messages (No Change Needed)

**Goal:** (No change from previous plan) Existing backend logic for text messages works.

## Phase 6: Error Handling & Edge Cases (Review and Enhance)

**Goal:** (Minor additions for cancellation) Ensure robustness.

1.  **Client-Side (`Socratic-Mobile`):**
   * **Recording Cancellation:** Ensure UI resets correctly. Test abrupt termination (e.g., app backgrounding) during `PanResponder` gesture.
   * (Other points same as previous plan: duration limit, transcription errors, empty transcript, network issues, UI state consistency).

2.  **Server-Side (`Socratic-Web/backend`):** (Same as previous plan)

## Phase 7: Testing (Crucial for a Good User Experience)

**Goal:** (Additions for gesture testing) Verify all aspects.

1.  **Component Tests (`ChatInput.tsx`):**
   * Mock `PanResponder` and test its callbacks.
   * Test `isGestureOverCancelZone` state changes.
   * Test that `handleCancelRecording` is called appropriately.
   * Test visibility of Cancel Zone.
   * (Other points same as previous plan).
2.  **Integration Tests:** (Same as previous plan)
3.  **Manual End-to-End Testing:**
   * **Slide to Cancel Gesture:**
       * Slide left and release over cancel zone. Verify recording is discarded.
       * Slide left but not far enough, then release over mic button. Verify recording is processed.
       * Slide left, then slide back right, then release over mic button. Verify recording is processed.
       * Test on different screen sizes/densities if cancel threshold is pixel-based.
   * (Other points same as previous plan: platforms, recording variations, transcription, review/edit, error states, overall UX).

## Phase 8: Refinements & Future Considerations (Post-MVP)

1.  **UI Polish:**
   * Smooth `Animated` transitions for the Cancel Zone appearing/disappearing and highlighting.
   * Animate the microphone button slightly following the user's finger during the slide (using `pan.setValue` in `onPanResponderMove`).
   * (Other points same as previous plan: loading indicators, volume feedback).
2.  **"Slide to Cancel" was implemented in this version.**
3.  **Audio Playback Before Sending:** (Same as previous plan)
4.  **Language Selection for STT:** (Same as previous plan)
5.  **Advanced Error Recovery:** (Same as previous plan)

This updated plan now includes the "slide to cancel" functionality using `PanResponder`. It's a bit more complex on the client-side due to gesture handling, so thorough testing of the `PanResponder` logic will be important.

I've updated the plan to include the "slide to cancel" functionality. The main changes are in Phase 1 (UI/UX) and Phase 2 (Audio Recording) on the client-side, detailing the use of PanResponder for gesture detection and the introduction of a "Cancel Zone" UI element.
Key additions:
* PanResponder integration: For handling the press, drag, and release gestures on the microphone button.
* Cancel Zone UI: A visual area (e.g., with a trash icon) that appears during recording, indicating where to slide to cancel.
* State variables: For managing the cancel gesture (e.g., isGestureOverCancelZone, showCancelZone).
* New function handleCancelRecording: To specifically manage the cancellation logic, including stopping the recording and discarding the audio file.
* Updated logic in PanResponder callbacks: To determine if a recording should be processed or cancelled based on the gesture.
This makes the feature more user-friendly by providing an explicit way to discard a recording. Remember that implementing gestures with PanResponder requires careful attention to coordinates and thresholds to feel intuitive.